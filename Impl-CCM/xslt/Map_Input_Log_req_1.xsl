<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/Map_Input_Log_req_1.map" md5sum="b4882eb281a084eff2cc4781304a7f3f" version="8.0.501" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM Graphical Data Mapping Editor.
*   Version 8.0.5.0
*
*   Mapping file:		Map_Input_Log_req_1.map
*   Map declaration(s):	Map_Input_Log_req_1
*   Input file(s):		smo://smo/name%3Dwsdl-primary/sharedContext%3D%257Bhttp%253A%252F%252FImpl-CCMLibrary%257DCCMSharedBO/message%3D%257Bhttp%253A%252F%252FImpl-CCMLibrary%252FSendCommunicationService%257DSendMessageRequestMsg/xpath%3D%252F/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/sharedContext%3D%257Bhttp%253A%252F%252FImpl-CCMLibrary%257DCCMSharedBO/message%3D%257Bhttp%253A%252F%252FImpl-AuditLibrary%252FAuditLoggingServices%257DupsertServiceLogRequestMsg/xpath%3D%252F/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xltxe="http://www.ibm.com/xmlns/prod/xltxe-j"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:str="http://exslt.org/strings"
    xmlns:exsl="http://exslt.org/common"
    xmlns:set="http://exslt.org/sets"
    xmlns:fn="http://www.w3.org/2005/xpath-functions"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:math="http://exslt.org/math"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xs4xs="http://www.w3.org/2001/XMLSchema"
    xmlns:io7="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:io6="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:in="http://NBDATA"
    xmlns:io="http://www.w3.org/2005/08/addressing"
    xmlns:io3="http://Impl-CCMLibrary"
    xmlns:in2="http://Impl-CCMLibrary/SendCommunicationService"
    xmlns:io2="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io5="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:io4="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:in3="wsdl.http://Impl-CCMLibrary/SendCommunicationService"
    xmlns:out2="http://Impl-AuditLibrary/AuditLoggingServices"
    xmlns:out3="http://NBHD"
    xmlns:out="wsdl.http://Impl-AuditLibrary/AuditLoggingServices"
    xmlns:Transform="com.tagic.hnb.Transform"
    xmlns:map="http://Impl-CCM/xslt/Map_Input_Log_req_1"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="date str exsl set fn math Transform map xltxe msl"
    version="2.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>
  <xltxe:java-extension prefix="Transform" class="com.tagic.hnb.Transform"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <xsl:element name="dataObject">
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'io5:ServiceMessageObject'"/>
            </xsl:attribute>
            <xsl:call-template name="map:Map_Input_Log_req_12">
              <xsl:with-param name="smo" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </xsl:element>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="io5:smo" mode="map:Map_Input_Log_req_1">
        </xsl:apply-templates>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "io5:smo" to "io5:smo".  -->
  <xsl:template match="io5:smo"  mode="map:Map_Input_Log_req_1">
    <io5:smo>
      <context>
        <!-- a structural mapping: "context/shared"(CCMSharedBO) to "shared"(CCMSharedBO) -->
        <xsl:if test="context/shared">
          <xsl:copy-of select="context/shared" copy-namespaces="yes"/>
        </xsl:if>
      </context>
      <headers>
        <HTTPHeader>
          <!-- a for-each transform: "header"(HTTPHeader) to "header"(HTTPHeader) -->
          <xsl:for-each select="headers/HTTPHeader/header">
            <xsl:copy-of select="." copy-namespaces="yes"/>
          </xsl:for-each>
        </HTTPHeader>
      </headers>
      <body>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'out:upsertServiceLogRequestMsg'"/>
        </xsl:attribute>
        <out2:upsertServiceLog>
          <serviceLogRequest>
            <!-- a simple data mapping: "body/in2:SendMessage/SendMessageAisInput/in:loggingDetails/in:applicationNo"(string) to "out3:caseNumber"(string) -->
            <xsl:if test="body/in2:SendMessage/SendMessageAisInput/in:loggingDetails/in:applicationNo">
              <xsl:element name="out3:caseNumber">
                <xsl:value-of select="body/in2:SendMessage/SendMessageAisInput/in:loggingDetails/in:applicationNo"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple mapping with no associated source:  to "out3:serviceType"(string) -->
            <xsl:element name="out3:serviceType">
              <xsl:text>OUT</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "out3:serviceName"(string) -->
            <xsl:element name="out3:serviceName">
              <xsl:text>CCM-Send Communication Service</xsl:text>
            </xsl:element>
            <!-- a simple data mapping: "body/in2:SendMessage/SendMessageAisInput"(SendMessageAIsInput) to "out3:request"(string) -->
            <xsl:if test="body/in2:SendMessage/SendMessageAisInput">
              <xsl:element name="out3:request">
                <!-- variables for custom code -->
                <xsl:variable name="SendMessageAisInput" select="body/in2:SendMessage/SendMessageAisInput"/>
                <xsl:value-of select="Transform:transformXMLToJSON($SendMessageAisInput)"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple mapping with no associated source:  to "out3:createdBy"(string) -->
            <xsl:element name="out3:createdBy">
              <xsl:text>PACE</xsl:text>
            </xsl:element>
            <!-- a simple mapping with no associated source:  to "out3:targetSystem"(string) -->
            <xsl:element name="out3:targetSystem">
              <xsl:text>CCM</xsl:text>
            </xsl:element>
            <!-- a simple data mapping: "body/in2:SendMessage/SendMessageAisInput/in:loggingDetails/in:lob"(string) to "out3:lob"(string) -->
            <xsl:if test="body/in2:SendMessage/SendMessageAisInput/in:loggingDetails/in:lob">
              <xsl:element name="out3:lob">
                <xsl:value-of select="body/in2:SendMessage/SendMessageAisInput/in:loggingDetails/in:lob"/>
              </xsl:element>
            </xsl:if>
          </serviceLogRequest>
        </out2:upsertServiceLog>
      </body>
    </io5:smo>
  </xsl:template>

  <!-- This rule represents a type mapping: "io5:smo" to "io5:smo".  -->
  <xsl:template name="map:Map_Input_Log_req_12">
    <xsl:param name="smo"/>
    <context>
      <!-- a structural mapping: "$smo/context/shared"(CCMSharedBO) to "shared"(CCMSharedBO) -->
      <xsl:if test="$smo/context/shared">
        <xsl:copy-of select="$smo/context/shared" copy-namespaces="yes"/>
      </xsl:if>
    </context>
    <headers>
      <HTTPHeader>
        <!-- a for-each transform: "header"(HTTPHeader) to "header"(HTTPHeader) -->
        <xsl:for-each select="$smo/headers/HTTPHeader/header">
          <xsl:copy-of select="." copy-namespaces="yes"/>
        </xsl:for-each>
      </HTTPHeader>
    </headers>
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out:upsertServiceLogRequestMsg'"/>
      </xsl:attribute>
      <out2:upsertServiceLog>
        <serviceLogRequest>
          <!-- a simple data mapping: "$smo/body/in2:SendMessage/SendMessageAisInput/in:loggingDetails/in:applicationNo"(string) to "out3:caseNumber"(string) -->
          <xsl:if test="$smo/body/in2:SendMessage/SendMessageAisInput/in:loggingDetails/in:applicationNo">
            <xsl:element name="out3:caseNumber">
              <xsl:value-of select="$smo/body/in2:SendMessage/SendMessageAisInput/in:loggingDetails/in:applicationNo"/>
            </xsl:element>
          </xsl:if>
          <!-- a simple mapping with no associated source:  to "out3:serviceType"(string) -->
          <xsl:element name="out3:serviceType">
            <xsl:text>OUT</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "out3:serviceName"(string) -->
          <xsl:element name="out3:serviceName">
            <xsl:text>CCM-Send Communication Service</xsl:text>
          </xsl:element>
          <!-- a simple data mapping: "$smo/body/in2:SendMessage/SendMessageAisInput"(SendMessageAIsInput) to "out3:request"(string) -->
          <xsl:if test="$smo/body/in2:SendMessage/SendMessageAisInput">
            <xsl:element name="out3:request">
              <!-- variables for custom code -->
              <xsl:variable name="SendMessageAisInput" select="$smo/body/in2:SendMessage/SendMessageAisInput"/>
              <xsl:value-of select="Transform:transformXMLToJSON($SendMessageAisInput)"/>
            </xsl:element>
          </xsl:if>
          <!-- a simple mapping with no associated source:  to "out3:createdBy"(string) -->
          <xsl:element name="out3:createdBy">
            <xsl:text>PACE</xsl:text>
          </xsl:element>
          <!-- a simple mapping with no associated source:  to "out3:targetSystem"(string) -->
          <xsl:element name="out3:targetSystem">
            <xsl:text>CCM</xsl:text>
          </xsl:element>
          <!-- a simple data mapping: "$smo/body/in2:SendMessage/SendMessageAisInput/in:loggingDetails/in:lob"(string) to "out3:lob"(string) -->
          <xsl:if test="$smo/body/in2:SendMessage/SendMessageAisInput/in:loggingDetails/in:lob">
            <xsl:element name="out3:lob">
              <xsl:value-of select="$smo/body/in2:SendMessage/SendMessageAisInput/in:loggingDetails/in:lob"/>
            </xsl:element>
          </xsl:if>
        </serviceLogRequest>
      </out2:upsertServiceLog>
    </body>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::node()[not(name() = '')]">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
