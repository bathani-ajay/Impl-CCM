<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/Map_Send_Email_Output_req_1.map" md5sum="cfbb40aab53874ab0f6fce7d9e14e405" version="8.0.501" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM Graphical Data Mapping Editor.
*   Version 8.0.5.0
*
*   Mapping file:		Map_Send_Email_Output_req_1.map
*   Map declaration(s):	Map_Send_Email_Output_req_1
*   Input file(s):		smo://smo/name%3Dwsdl-primary/sharedContext%3D%257Bhttp%253A%252F%252FImpl-CCMLibrary%257DCCMSharedBO/message%3D%257Bhttp%253A%252F%252FImpl-CCMLibrary%252FSendCommunication%257DSendMessageResponseMsg/xpath%3D%252F/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/sharedContext%3D%257Bhttp%253A%252F%252FImpl-CCMLibrary%257DCCMSharedBO/message%3D%257Bhttp%253A%252F%252FImpl-CCMLibrary%252FSendCommunicationService%257DSendMessageResponseMsg/xpath%3D%252F/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xltxe="http://www.ibm.com/xmlns/prod/xltxe-j"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:str="http://exslt.org/strings"
    xmlns:exsl="http://exslt.org/common"
    xmlns:set="http://exslt.org/sets"
    xmlns:fn="http://www.w3.org/2005/xpath-functions"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:math="http://exslt.org/math"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xs4xs="http://www.w3.org/2001/XMLSchema"
    xmlns:io7="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:io6="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:in="http://Impl-CCMLibrary/SendCommunication"
    xmlns:io="http://www.w3.org/2005/08/addressing"
    xmlns:io3="http://Impl-CCMLibrary"
    xmlns:in2="wsdl.http://Impl-CCMLibrary/SendCommunication"
    xmlns:io2="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io5="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:io4="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:out2="http://Impl-CCMLibrary/SendCommunicationService"
    xmlns:out3="wsdl.http://Impl-CCMLibrary/SendCommunicationService"
    xmlns:out="http://NBDATA"
    xmlns:map="http://Impl-CCM/xslt/Map_Send_Email_Output_req_1"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="date str exsl set fn math map xltxe msl"
    version="2.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <xsl:element name="dataObject">
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'io5:ServiceMessageObject'"/>
            </xsl:attribute>
            <xsl:call-template name="map:Map_Send_Email_Output_req_12">
              <xsl:with-param name="smo" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </xsl:element>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="io5:smo" mode="map:Map_Send_Email_Output_req_1">
        </xsl:apply-templates>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "io5:smo" to "io5:smo".  -->
  <xsl:template match="io5:smo"  mode="map:Map_Send_Email_Output_req_1">
    <io5:smo>
      <body>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'out3:SendMessageResponseMsg'"/>
        </xsl:attribute>
        <out2:SendMessageResponse>
          <!-- variables for custom code -->
          <xsl:variable name="message" select="body/in:SendMessageResponse/SendMessageOutput/message"/>
          <xsl:variable name="failureString" select="context/failInfo/failureString"/>
          <xsl:choose>
            <xsl:when test="fn:boolean($message) and $message != &apos;Communication initiated for the requested channels&apos;">
              <SendMessageAisOutput>
                <out:response>
                  <!-- a simple mapping with no associated source:  to "out:status"(string) -->
                  <xsl:element name="out:status">
                    <xsl:text>400</xsl:text>
                  </xsl:element>
                  <out:error>
                    <!-- a simple mapping with no associated source:  to "out:code"(string) -->
                    <xsl:element name="out:code">
                      <xsl:text>400</xsl:text>
                    </xsl:element>
                    <!-- a simple mapping with no associated source:  to "out:message"(string) -->
                    <xsl:element name="out:message">
                      <xsl:text>Failed</xsl:text>
                    </xsl:element>
                    <!-- a simple data mapping: "body/in:SendMessageResponse/SendMessageOutput/message"(string) to "out:detail"(string) -->
                    <xsl:if test="body/in:SendMessageResponse/SendMessageOutput/message">
                      <xsl:element name="out:detail">
                        <xsl:value-of select="body/in:SendMessageResponse/SendMessageOutput/message"/>
                      </xsl:element>
                    </xsl:if>
                  </out:error>
                </out:response>
              </SendMessageAisOutput>
            </xsl:when>
            <xsl:when test="fn:boolean($failureString) and $failureString != &apos;&apos;">
              <SendMessageAisOutput>
                <out:response>
                  <!-- a simple mapping with no associated source:  to "out:status"(string) -->
                  <xsl:element name="out:status">
                    <xsl:text>400</xsl:text>
                  </xsl:element>
                  <out:error>
                    <!-- a simple mapping with no associated source:  to "out:code"(string) -->
                    <xsl:element name="out:code">
                      <xsl:text>400</xsl:text>
                    </xsl:element>
                    <!-- a simple mapping with no associated source:  to "out:message"(string) -->
                    <xsl:element name="out:message">
                      <xsl:text>Error in Sending Message</xsl:text>
                    </xsl:element>
                  </out:error>
                </out:response>
              </SendMessageAisOutput>
            </xsl:when>
            <xsl:otherwise>
              <SendMessageAisOutput>
                <out:response>
                  <!-- a simple mapping with no associated source:  to "out:status"(string) -->
                  <xsl:element name="out:status">
                    <xsl:text>200</xsl:text>
                  </xsl:element>
                  <!-- a simple data mapping: "body/in:SendMessageResponse/SendMessageOutput/message"(string) to "out:data"(string) -->
                  <xsl:if test="body/in:SendMessageResponse/SendMessageOutput/message">
                    <xsl:element name="out:data">
                      <xsl:value-of select="body/in:SendMessageResponse/SendMessageOutput/message"/>
                    </xsl:element>
                  </xsl:if>
                </out:response>
              </SendMessageAisOutput>
            </xsl:otherwise>
          </xsl:choose>
        </out2:SendMessageResponse>
      </body>
    </io5:smo>
  </xsl:template>

  <!-- This rule represents a type mapping: "io5:smo" to "io5:smo".  -->
  <xsl:template name="map:Map_Send_Email_Output_req_12">
    <xsl:param name="smo"/>
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out3:SendMessageResponseMsg'"/>
      </xsl:attribute>
      <out2:SendMessageResponse>
        <!-- variables for custom code -->
        <xsl:variable name="message" select="$smo/body/in:SendMessageResponse/SendMessageOutput/message"/>
        <xsl:variable name="failureString" select="$smo/context/failInfo/failureString"/>
        <xsl:choose>
          <xsl:when test="fn:boolean($message) and $message != &apos;Communication initiated for the requested channels&apos;">
            <SendMessageAisOutput>
              <out:response>
                <!-- a simple mapping with no associated source:  to "out:status"(string) -->
                <xsl:element name="out:status">
                  <xsl:text>400</xsl:text>
                </xsl:element>
                <out:error>
                  <!-- a simple mapping with no associated source:  to "out:code"(string) -->
                  <xsl:element name="out:code">
                    <xsl:text>400</xsl:text>
                  </xsl:element>
                  <!-- a simple mapping with no associated source:  to "out:message"(string) -->
                  <xsl:element name="out:message">
                    <xsl:text>Failed</xsl:text>
                  </xsl:element>
                  <!-- a simple data mapping: "$smo/body/in:SendMessageResponse/SendMessageOutput/message"(string) to "out:detail"(string) -->
                  <xsl:if test="$smo/body/in:SendMessageResponse/SendMessageOutput/message">
                    <xsl:element name="out:detail">
                      <xsl:value-of select="$smo/body/in:SendMessageResponse/SendMessageOutput/message"/>
                    </xsl:element>
                  </xsl:if>
                </out:error>
              </out:response>
            </SendMessageAisOutput>
          </xsl:when>
          <xsl:when test="fn:boolean($failureString) and $failureString != &apos;&apos;">
            <SendMessageAisOutput>
              <out:response>
                <!-- a simple mapping with no associated source:  to "out:status"(string) -->
                <xsl:element name="out:status">
                  <xsl:text>400</xsl:text>
                </xsl:element>
                <out:error>
                  <!-- a simple mapping with no associated source:  to "out:code"(string) -->
                  <xsl:element name="out:code">
                    <xsl:text>400</xsl:text>
                  </xsl:element>
                  <!-- a simple mapping with no associated source:  to "out:message"(string) -->
                  <xsl:element name="out:message">
                    <xsl:text>Error in Sending Message</xsl:text>
                  </xsl:element>
                </out:error>
              </out:response>
            </SendMessageAisOutput>
          </xsl:when>
          <xsl:otherwise>
            <SendMessageAisOutput>
              <out:response>
                <!-- a simple mapping with no associated source:  to "out:status"(string) -->
                <xsl:element name="out:status">
                  <xsl:text>200</xsl:text>
                </xsl:element>
                <!-- a simple data mapping: "$smo/body/in:SendMessageResponse/SendMessageOutput/message"(string) to "out:data"(string) -->
                <xsl:if test="$smo/body/in:SendMessageResponse/SendMessageOutput/message">
                  <xsl:element name="out:data">
                    <xsl:value-of select="$smo/body/in:SendMessageResponse/SendMessageOutput/message"/>
                  </xsl:element>
                </xsl:if>
              </out:response>
            </SendMessageAisOutput>
          </xsl:otherwise>
        </xsl:choose>
      </out2:SendMessageResponse>
    </body>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::node()[not(name() = '')]">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
